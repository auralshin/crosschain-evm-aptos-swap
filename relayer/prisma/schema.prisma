generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Chain {
  EVM
  APTOS
}

enum EscrowSide {
  SRC
  DST
}

enum OrderStatus {
  SRC_ESCROW_CREATED // Source‐chain escrow deposited
  AUCTION_OPEN // Bids are being placed
  AUCTION_CLOSED // Auction has finished
  DST_ESCROW_CREATED // Destination escrow created by resolver
  SECRET_REVEALED // Secret submitted by user, funds about to be released
  SETTLEMENT_COMPLETE // Funds released to user
}

enum BidStatus {
  PLACED
  WON
  LOST
  EXPIRED
}

enum EscrowStatus {
  CREATED // Escrow contract has been deployed
  VERIFIED // Relayer has verified escrow on‐chain
  SECRET_REQUESTED // Relayer has asked user for the pre‐image
  SECRET_RECEIVED // Relayer received secret
  FUNDS_RELEASED // Final funds released on this chain
}

model Order {
  id                      Int         @id @default(autoincrement())
  sourceUserAddress       String
  sourceTokenAddress      String
  destinationTokenAddress String
  sourceTokenAmount       String
  destinationTokenAmount  String
  sourceChain             Chain
  destinationChain        Chain
  destinationUserAddress  String
  auctionStartTime        DateTime
  auctionDuration         Int // Duration in seconds
  status                  OrderStatus @default(AUCTION_OPEN)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt

  bids    Bid[]    @relation("OrderBids")
  escrows Escrow[] @relation("OrderEscrows")
  secrets Secret[] @relation("OrderSecrets")
}

model Bid {
  id           Int       @id @default(autoincrement())
  order        Order     @relation("OrderBids", fields: [orderId], references: [id])
  orderId      Int
  resolver     String
  bidAmount    String
  bidTxHash    String?
  filledAmount String
  expiry       DateTime
  status       BidStatus @default(PLACED)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Escrow {
  id            Int        @id @default(autoincrement())
  order         Order      @relation("OrderEscrows", fields: [orderId], references: [id])
  orderId       Int
  side          EscrowSide // SRC or DST
  chain         Chain // EVM or APTOS
  escrowAddress String // Deployed contract address
  escrowTxHash  String // Tx hash of deploySrc()

  // Hashlock and signature fields
  hashlock  String // keccak256("secret")
  orderHash String // hashOrder(...)
  sigR      String // splitSig.r
  sigVS     String // bytes32((v-27)<<255) | s

  // The raw ABI-encoded blobs you passed in
  timelocks      String // 32-byte hex blob for Timelocks.wrap(...)
  extraData      String // bytes from buidDynamicData()
  auctionDetails String // bytes from buildAuctionDetails()

  status    EscrowStatus @default(CREATED)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  secret Secret? @relation("EscrowToSecret")
}

model Secret {
  id         Int      @id @default(autoincrement())
  order      Order    @relation("OrderSecrets", fields: [orderId], references: [id])
  orderId    Int
  escrow     Escrow   @relation("EscrowToSecret", fields: [escrowId], references: [id])
  escrowId   Int      @unique
  secret     String
  revealedAt DateTime @default(now())
}
