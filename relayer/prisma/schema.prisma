generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Chain {
  EVM
  APTOS
}

enum EscrowSide {
  SRC
  DST
}

enum OrderStatus {
  SRC_ESCROW_CREATED // Source‐chain escrow deposited
  AUCTION_OPEN // Bids are being placed
  AUCTION_CLOSED // Auction has finished
  DST_ESCROW_CREATED // Destination escrow created by resolver
  SECRET_REVEALED // Secret submitted by user, funds about to be released
  SETTLEMENT_COMPLETE // Funds released to user
}

enum BidStatus {
  PLACED
  WON
  LOST
  EXPIRED
}

enum EscrowStatus {
  CREATED // Escrow contract has been deployed
  VERIFIED // Relayer has verified escrow on‐chain
  SECRET_REQUESTED // Relayer has asked user for the pre‐image
  SECRET_RECEIVED // Relayer received secret
  FUNDS_RELEASED // Final funds released on this chain
}

model Order {
  id                      Int         @id @default(autoincrement())
  sourceUserAddress       String // User’s wallet on source chain
  sourceTokenAddress      String // Token they’re swapping
  destinationTokenAddress String // Token they want to receive
  sourceTokenAmount       String // Amount of source token to swap
  destinationTokenAmount  String // Amount of destination token to receive
  sourceChain             Chain // EVM or APTOS
  destinationChain        Chain // EVM or APTOS
  destinationUserAddress  String // User’s wallet on dest chain
  status                  OrderStatus @default(AUCTION_OPEN)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt

  bids    Bid[]    @relation("OrderBids")
  escrows Escrow[] @relation("OrderEscrows")
  secrets Secret[] @relation("OrderSecrets")
}

model Bid {
  id           Int       @id @default(autoincrement())
  order        Order     @relation("OrderBids", fields: [orderId], references: [id])
  orderId      Int
  resolver     String // Address of the resolver placing this bid
  bidAmount    String // The deposit/stake offered by resolver for the bid
  bidTxHash    String? // On‐chain tx hash of bid placement
  filledAmount String // How much of the order this bid actually fills (partial‐fill support)
  expiry       DateTime // Bid validity deadline
  status       BidStatus @default(PLACED)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Escrow {
  id            Int          @id @default(autoincrement())
  order         Order        @relation("OrderEscrows", fields: [orderId], references: [id])
  orderId       Int
  side          EscrowSide // SRC or DST
  chain         Chain // EVM or APTOS
  escrowAddress String // Contract/account address holding funds
  escrowTxHash  String // On‐chain tx hash of escrow creation
  secretHash    String // Hashlock used for this escrow
  status        EscrowStatus @default(CREATED)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  secret   Secret? @relation("EscrowToSecret")
  secretId Int?
}

model Secret {
  id         Int      @id @default(autoincrement())
  order      Order    @relation("OrderSecrets", fields: [orderId], references: [id])
  orderId    Int
  escrow     Escrow   @relation("EscrowToSecret", fields: [escrowId], references: [id])
  escrowId   Int      @unique
  secret     String // The pre‐image revealed by the user
  revealedAt DateTime @default(now())
}
